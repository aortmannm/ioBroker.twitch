{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport { TwitchApi } from './twitch-api';\n\nclass Twitch extends utils.Adapter {\n    private twitchApi: TwitchApi | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'twitch',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        if (!this.config.authToken) {\n            this.log.error('Auth token is empty - please check instance configuration');\n            return;\n        }\n\n        if (!this.config.username) {\n            this.log.error('Username is empty - please check instance configuration');\n            return;\n        }\n\n        this.log.info('Auth token: ' + this.config.authToken);\n        this.log.info('Twitch Username: ' + this.config.username);\n\n        this.twitchApi = new TwitchApi(this.config.authToken, this.config.username, this.log);\n\n        try {\n            await this.twitchApi.initialize();\n        } catch (err: any) {}\n\n        this.updateFollowersInStore();\n    }\n\n    private async updateFollowersInStore(): Promise<void> {\n        const followers = await this.twitchApi?.getFollowers();\n        this.log.error(`Followers: ${followers?.length}`);\n        // followers?.forEach((follower) => {\n        //     // this.log.error(`Follower ${follower.to_name}`);\n        // });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Twitch(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Twitch())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAIA,YAAuB;AACvB,wBAA0B;AAE1B,MAAM,eAAe,MAAM,QAAQ;AAAA,EAExB,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AACnC,QAAI,CAAC,KAAK,OAAO,WAAW;AACxB,WAAK,IAAI,MAAM,2DAA2D;AAC1E;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,OAAO,UAAU;AACvB,WAAK,IAAI,MAAM,yDAAyD;AACxE;AAAA,IACJ;AAEA,SAAK,IAAI,KAAK,iBAAiB,KAAK,OAAO,SAAS;AACpD,SAAK,IAAI,KAAK,sBAAsB,KAAK,OAAO,QAAQ;AAExD,SAAK,YAAY,IAAI,4BAAU,KAAK,OAAO,WAAW,KAAK,OAAO,UAAU,KAAK,GAAG;AAEpF,QAAI;AACA,YAAM,KAAK,UAAU,WAAW;AAAA,IACpC,SAAS,KAAP;AAAA,IAAkB;AAEpB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EAEA,MAAc,yBAAwC;AA/C1D;AAgDQ,UAAM,YAAY,QAAM,UAAK,cAAL,mBAAgB;AACxC,SAAK,IAAI,MAAM,cAAc,uCAAW,QAAQ;AAAA,EAIpD;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,OAAO,OAAO;AAC/F,OAAO;AAEH,GAAC,MAAM,IAAI,OAAO,GAAG;AACzB;",
  "names": []
}
