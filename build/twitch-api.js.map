{
  "version": 3,
  "sources": ["../src/twitch-api.ts"],
  "sourcesContent": ["import { default as axios } from 'axios';\r\nimport { IFollower } from './interfaces/follower.interface';\r\n\r\nconst CLIENT_ID = 'obgkb95iqahks1jtlzu4unrjvaq205';\r\n\r\nexport class TwitchApi {\r\n    private authToken: string;\r\n    private username: string;\r\n    private userId = '';\r\n    private logger: ioBroker.Logger;\r\n    private defaultHeaderOptions: { Authorization: string; 'Client-Id': string };\r\n\r\n    public constructor(authToken: string, username: string, logger: ioBroker.Logger) {\r\n        this.authToken = authToken;\r\n        this.username = username;\r\n        this.logger = logger;\r\n\r\n        this.defaultHeaderOptions = {\r\n            Authorization: `Bearer ${this.authToken}`,\r\n            'Client-Id': CLIENT_ID,\r\n        };\r\n    }\r\n\r\n    public async initialize(): Promise<void> {\r\n        this.userId = await this.getUserId();\r\n    }\r\n\r\n    private getUserId(): Promise<string> {\r\n        const userInformationUrl = 'https://api.twitch.tv/helix/users';\r\n        return axios\r\n            .get(userInformationUrl, {\r\n                headers: {\r\n                    ...this.defaultHeaderOptions,\r\n                    login: this.username,\r\n                },\r\n            })\r\n            .then((res) => {\r\n                return res.data.data[0].id;\r\n            })\r\n            .catch((err) => {\r\n                this.logger.error(`Error while getting user id: ${err}`);\r\n            });\r\n    }\r\n\r\n    public async getFollowers(followers: Array<IFollower> = [], paginationCursor?: string): Promise<Array<IFollower>> {\r\n        let followerUrl = `https://api.twitch.tv/helix/users/follows?from_id=${this.userId}&first=100`;\r\n        if (paginationCursor) {\r\n            followerUrl = `https://api.twitch.tv/helix/users/follows?from_id=${this.userId}&first=100&after=${paginationCursor}`;\r\n        }\r\n\r\n        return axios\r\n            .get(followerUrl, {\r\n                headers: {\r\n                    ...this.defaultHeaderOptions,\r\n                },\r\n            })\r\n            .then((res) => {\r\n                followers = [...followers, ...res.data.data];\r\n\r\n                if (res.data.pagination.cursor) {\r\n                    this.logger.debug('Loading next page');\r\n                    return this.getFollowers(followers, res.data.pagination.cursor);\r\n                } else {\r\n                    return followers;\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                this.logger.error(`Couldn't retreive list of the channels you follow ${err}`);\r\n                return followers;\r\n            });\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiC;AAGjC,MAAM,YAAY;AAEX,MAAM,UAAU;AAAA,EAOZ,YAAY,WAAmB,UAAkB,QAAyB;AAJjF,SAAQ,SAAS;AAKb,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,SAAS;AAEd,SAAK,uBAAuB;AAAA,MACxB,eAAe,UAAU,KAAK;AAAA,MAC9B,aAAa;AAAA,IACjB;AAAA,EACJ;AAAA,EAEA,MAAa,aAA4B;AACrC,SAAK,SAAS,MAAM,KAAK,UAAU;AAAA,EACvC;AAAA,EAEQ,YAA6B;AACjC,UAAM,qBAAqB;AAC3B,WAAO,aAAAA,QACF,IAAI,oBAAoB;AAAA,MACrB,SAAS;AAAA,QACL,GAAG,KAAK;AAAA,QACR,OAAO,KAAK;AAAA,MAChB;AAAA,IACJ,CAAC,EACA,KAAK,CAAC,QAAQ;AACX,aAAO,IAAI,KAAK,KAAK,GAAG;AAAA,IAC5B,CAAC,EACA,MAAM,CAAC,QAAQ;AACZ,WAAK,OAAO,MAAM,gCAAgC,KAAK;AAAA,IAC3D,CAAC;AAAA,EACT;AAAA,EAEA,MAAa,aAAa,YAA8B,CAAC,GAAG,kBAAsD;AAC9G,QAAI,cAAc,qDAAqD,KAAK;AAC5E,QAAI,kBAAkB;AAClB,oBAAc,qDAAqD,KAAK,0BAA0B;AAAA,IACtG;AAEA,WAAO,aAAAA,QACF,IAAI,aAAa;AAAA,MACd,SAAS;AAAA,QACL,GAAG,KAAK;AAAA,MACZ;AAAA,IACJ,CAAC,EACA,KAAK,CAAC,QAAQ;AACX,kBAAY,CAAC,GAAG,WAAW,GAAG,IAAI,KAAK,IAAI;AAE3C,UAAI,IAAI,KAAK,WAAW,QAAQ;AAC5B,aAAK,OAAO,MAAM,mBAAmB;AACrC,eAAO,KAAK,aAAa,WAAW,IAAI,KAAK,WAAW,MAAM;AAAA,MAClE,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ,CAAC,EACA,MAAM,CAAC,QAAQ;AACZ,WAAK,OAAO,MAAM,qDAAqD,KAAK;AAC5E,aAAO;AAAA,IACX,CAAC;AAAA,EACT;AACJ;",
  "names": ["axios"]
}
